{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/hexo-theme-yilia/source/js/pc.js","path":"js/pc.js","modified":0},{"_id":"themes/hexo-theme-yilia/source/js/mobile.js","path":"js/mobile.js","modified":0},{"_id":"themes/hexo-theme-yilia/source/js/main.js","path":"js/main.js","modified":0},{"_id":"themes/hexo-theme-yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0},{"_id":"themes/hexo-theme-yilia/source/js/instagram.js","path":"js/instagram.js","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/weibo.png","path":"img/weibo.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/twitter.png","path":"img/twitter.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/rss.png","path":"img/rss.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/mail.png","path":"img/mail.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/img-err.png","path":"img/img-err.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/google.png","path":"img/google.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/github.png","path":"img/github.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/facebook.png","path":"img/facebook.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/douban.png","path":"img/douban.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/delicious.png","path":"img/delicious.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/hexo-theme-yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/hexo-theme-yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/hexo-theme-yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/hexo-theme-yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/hexo-theme-yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/hexo-theme-yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/hexo-theme-yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/hexo-theme-yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/hexo-theme-yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/hexo-theme-yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/hexo-theme-yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/hexo-theme-yilia/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/hexo-theme-yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/hexo-theme-yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/hexo-theme-yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":0},{"_id":"themes/hexo-theme-yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/hexo-theme-yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"source/img/runtime/runtime_1.gif","path":"img/runtime/runtime_1.gif","modified":0},{"_id":"source/img/runtime/runtime_0.pdf","path":"img/runtime/runtime_0.pdf","modified":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0},{"_id":"source/img/UIImageRenderingMode/renderingMode_3.png","path":"img/UIImageRenderingMode/renderingMode_3.png","modified":0},{"_id":"source/img/UIImageRenderingMode/renderingMode_2.jpg","path":"img/UIImageRenderingMode/renderingMode_2.jpg","modified":0},{"_id":"source/img/UIImageRenderingMode/renderingMode_1.png","path":"img/UIImageRenderingMode/renderingMode_1.png","modified":0},{"_id":"source/img/UIImageRenderingMode/renderingMode_0.png","path":"img/UIImageRenderingMode/renderingMode_0.png","modified":0},{"_id":"source/img/OpenSSH/openssh_0.jpg","path":"img/OpenSSH/openssh_0.jpg","modified":0},{"_id":"source/img/ApplePay/image_1.png","path":"img/ApplePay/image_1.png","modified":0},{"_id":"source/img/ApplePay/header.jpg","path":"img/ApplePay/header.jpg","modified":0}],"Cache":[{"_id":"source/_posts/associated-objects.md","shasum":"10718d4bac329a0b74988ecb14d7ccf31da7f79a","modified":1458369537000},{"_id":"source/_posts/objective-c-runtime.md","shasum":"ffd36a6dde969e5a822e76b2ea95b1e1873a6945","modified":1458402214000},{"_id":"source/_posts/uiimage-rendering-mode.md","shasum":"7f0c20573b9313edc73a13b49bc8a1fdecc71a00","modified":1458369537000},{"_id":"source/_posts/apple-pay.md","shasum":"749a474ce26536939ce7cd0dc2b8690a850f76a8","modified":1458369537000},{"_id":"source/archive/index.md","shasum":"7183724d0680d0b60c082bcd03b9c0bf3a8f38df","modified":1458369537000},{"_id":"source/hello-world.md","shasum":"cec989385917e1246cd1a5028079a46e86924057","modified":1458369537000},{"_id":"source/img/ApplePay/image_1.png","shasum":"1d106cd33328a858ae82689ff7e7e3d03d8650d8","modified":1458369537000},{"_id":"source/img/OpenSSH/openssh_0.jpg","shasum":"d32a2dfe76448edbbd26520da7ab55b9c335edec","modified":1458369537000},{"_id":"source/img/UIImageRenderingMode/renderingMode_0.png","shasum":"e8db8ee18989c1c8f2151cce3fa29e46862cee0d","modified":1458369537000},{"_id":"source/img/UIImageRenderingMode/renderingMode_1.png","shasum":"3f4ca7de01aabd8f511aef3ba7a1f36dcff8209f","modified":1458369537000},{"_id":"source/img/UIImageRenderingMode/renderingMode_2.jpg","shasum":"d99eb51eba0d4263265bd58584ac766e1c9c6f2d","modified":1458369537000},{"_id":"source/img/UIImageRenderingMode/renderingMode_3.png","shasum":"7baa9b136728df69483385b9932e5e0ffa1688db","modified":1458369537000},{"_id":"source/img/avatar.jpg","shasum":"d854af8555a3845c3a5b660a74f22229cd7033b9","modified":1458369537000},{"_id":"source/img/runtime/runtime_0.pdf","shasum":"89f7bef731d5759b30b31a524afd849a7f011b42","modified":1458369537000},{"_id":"source/img/runtime/runtime_1.gif","shasum":"834e8b6421bc141f4518475f67e5e5267ebe9493","modified":1458369537000},{"_id":"source/img/ApplePay/header.jpg","shasum":"fb3ff301f23f6c876605996ad9b1bbe305165e28","modified":1458369537000},{"_id":"themes/hexo-theme-yilia/README.md","shasum":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/_config.yml","shasum":"3261300a91a212ea525d651b8bebc62579caa092","modified":1458391243000},{"_id":"themes/hexo-theme-yilia/languages/default.yml","shasum":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/languages/de.yml","shasum":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/languages/en.yml","shasum":"8fa0a7482188ca56fd3cf19c4a87320f85a76846","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/languages/fr-FR.yml","shasum":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/languages/ru.yml","shasum":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/languages/zh-Hans.yml","shasum":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/languages/zh-hk.yml","shasum":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/layout/_partial/after-footer.ejs","shasum":"72057d7d04c34951c7805ebf2bd3eac3503d223b","modified":1455701850000},{"_id":"themes/hexo-theme-yilia/languages/zh-tw.yml","shasum":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/layout/_partial/archive-post.ejs","shasum":"8dfb6d68aa8a0661d26c32ce1ce1f45815364c3a","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/_partial/archive.ejs","shasum":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/_partial/article.ejs","shasum":"d6306cd897683c25184a50b29931aa1fa18d119c","modified":1455702727000},{"_id":"themes/hexo-theme-yilia/layout/_partial/baidu_tongji.ejs","shasum":"8990b131541c7adac1838b34381e87e669ef668c","modified":1455701901000},{"_id":"themes/hexo-theme-yilia/layout/_partial/footer.ejs","shasum":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/_partial/head.ejs","shasum":"ddcae6c9328dfdfee89e2a9462b1483d7d7275dc","modified":1458396779000},{"_id":"themes/hexo-theme-yilia/layout/_partial/header.ejs","shasum":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/_partial/left-col.ejs","shasum":"b5ce8232d55c5b21214d91a499383c322fcd293e","modified":1455692823000},{"_id":"themes/hexo-theme-yilia/layout/_partial/mathjax.ejs","shasum":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/_partial/mobile-nav.ejs","shasum":"fff29e619af2b1abcab7d5d2d6f78428272f18f7","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/category.ejs","shasum":"d4f0e36f9a2167e91082dbd7d52425a06d2bebbf","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/date.ejs","shasum":"c0c988334e857a77ba455a056dfa21809e7e76a5","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/duoshuo.ejs","shasum":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1458391199000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/nav.ejs","shasum":"d19dee2082528e1844bed3aa4e4bd59f15fd7a7a","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/share_addthis.ejs","shasum":"0ac35bd92e58983c189ac0c35df404ebc6ee826e","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/share_jia.ejs","shasum":"7bc5fe7bd2586febff9112c67a47e758d13739b3","modified":1458393314000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/tag.ejs","shasum":"78612cfc091d7d861a70455a0dc8c3036e460879","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/layout.ejs","shasum":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/source/css/_extend.styl","shasum":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1458372053000},{"_id":"themes/hexo-theme-yilia/source/css/_partial/archive.styl","shasum":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/css/_partial/article.styl","shasum":"4e9e70094ffaad337d27dfca65278906cf1ba5d9","modified":1458373989000},{"_id":"themes/hexo-theme-yilia/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1450265730000},{"_id":"themes/hexo-theme-yilia/package.json","shasum":"00357ef6f24eb049074da81809e98f973f528cca","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/css/_partial/footer.styl","shasum":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/css/_partial/main.styl","shasum":"df8c2d4781b225424881dc38c893412d980f5305","modified":1455697961000},{"_id":"themes/hexo-theme-yilia/source/css/_partial/header.styl","shasum":"67e59feb18eee6026717cb440d86ab9551782628","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/css/_partial/highlight.styl","shasum":"7118d13af29f743e4b00aef0aa76d2f62e3012b7","modified":1458127088000},{"_id":"themes/hexo-theme-yilia/source/css/_partial/instagram.styl","shasum":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/css/_partial/page.styl","shasum":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/css/_partial/mobile-slider.styl","shasum":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1455680017000},{"_id":"themes/hexo-theme-yilia/source/css/_partial/mobile.styl","shasum":"c2b9adf4509576a8400e8e89f1d44c1fad08d277","modified":1455680180000},{"_id":"themes/hexo-theme-yilia/source/css/_partial/scroll.styl","shasum":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/css/_partial/share.styl","shasum":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/css/_partial/tagcloud.styl","shasum":"af0115de5c6455f899a2e09225b50224982c039d","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/css/_partial/wheelmenu.styl","shasum":"74630c56944e27bef53ef0c0e391611a2eec2ed0","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/css/_util/grid.styl","shasum":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/css/_util/mixin.styl","shasum":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/css/_variables.styl","shasum":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/css/fonts/fontawesome-webfont.eot","shasum":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/css/style.styl","shasum":"308cad2a29188ed4fea1d5c082b42fc7e728025e","modified":1458373253000},{"_id":"themes/hexo-theme-yilia/source/css/fonts/fontawesome-webfont.svgz","shasum":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/css/fonts/fontawesome-webfont.ttf","shasum":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/css/fonts/fontawesome-webfont.woff","shasum":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/fancybox/jquery.fancybox.css","shasum":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/delicious.png","shasum":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/fancybox/jquery.fancybox.js","shasum":"a82597493d75ea989ca586e09173cff332efe41e","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/coderwall.png","shasum":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/douban.png","shasum":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/github.png","shasum":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/facebook.png","shasum":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/google.png","shasum":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/linkedin.png","shasum":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/img-err.png","shasum":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/img-loading.png","shasum":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/mail.png","shasum":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/pinboard.png","shasum":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/pinterest.png","shasum":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/rss.png","shasum":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/scrollbar_arrow.png","shasum":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/stackoverflow.png","shasum":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/twitter.png","shasum":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/zhihu.png","shasum":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/img/weibo.png","shasum":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/js/instagram.js","shasum":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/js/jquery.lazyload.js","shasum":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/js/main.js","shasum":"93a1cae186e77a86e9997ae6a2f4860fd96178d5","modified":1455616385000},{"_id":"themes/hexo-theme-yilia/source/js/mobile.js","shasum":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/js/pc.js","shasum":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1455603697000},{"_id":"themes/hexo-theme-yilia/source/css/fonts/fontawesome-webfont.svg","shasum":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1455603697000},{"_id":"public/hello-world.html","modified":1458402675844,"shasum":"40ef2061ee2923cc46b43d0156bd5f133ddf4cbc"},{"_id":"public/archive/index.html","modified":1458402675883,"shasum":"3aace70c40e739f48208c3f2c8e424fa7dc5e365"},{"_id":"public/2016/03/16/objective-c-runtime/index.html","modified":1458402675954,"shasum":"da789b3f758ac53bd99cc54253f2d85e5055911e"},{"_id":"public/2016/02/18/apple-pay/index.html","modified":1458402675999,"shasum":"b0dc91c4907c47c8483ffa4fd90d7641c172a105"},{"_id":"public/2016/01/25/associated-objects/index.html","modified":1458402676058,"shasum":"e70ae40fed0817496df4cd2cc6671403274c6117"},{"_id":"public/2015/03/29/uiimage-rendering-mode/index.html","modified":1458402676070,"shasum":"28a1984b55157913032ff7aa7dd8a59794faf2c8"},{"_id":"public/atom.xml","modified":1458402676073,"shasum":"7be49fed310ab38816b04a81a0772eb8348a952f"},{"_id":"public/categories/iOS开发/index.html","modified":1458402676089,"shasum":"b318ca23d575d6164ae655a1378df58b3d3f25e1"},{"_id":"public/categories/iOS-Tips/index.html","modified":1458402676098,"shasum":"db8c4b2b3eaf293ea7d7ef359150bab50de75f3a"},{"_id":"public/archives/index.html","modified":1458402676112,"shasum":"85aa9816ca9d94d2c4338db5e0802a6ff1478b2b"},{"_id":"public/archives/2015/index.html","modified":1458402676118,"shasum":"0d15a30ea97d5da06d5af3cb5fd95992f480d401"},{"_id":"public/archives/2015/03/index.html","modified":1458402676124,"shasum":"023be1faa5c8350367a2276b663663c2b8f8d92f"},{"_id":"public/archives/2016/index.html","modified":1458402676134,"shasum":"6836d79b6372f7daa66e9f7ab5e1ebc564e93a72"},{"_id":"public/archives/2016/01/index.html","modified":1458402676140,"shasum":"c634b47ae4ea5f1d30a157df1f7d42237789f8ce"},{"_id":"public/archives/2016/02/index.html","modified":1458402676146,"shasum":"52276ee6ba4f889fedb1b2d5d24d5e19605ba4e0"},{"_id":"public/archives/2016/03/index.html","modified":1458402676154,"shasum":"922ccb289f5958a39118812af557118a0e7b82f8"},{"_id":"public/tags/Apple-Pay/index.html","modified":1458402676161,"shasum":"f874968c43798ceb83ef7729b8ea9c0183db6050"},{"_id":"public/tags/UI/index.html","modified":1458402676170,"shasum":"b869d9dd8fb3b93eb5bed86439e8173818e520b0"},{"_id":"public/tags/runtime/index.html","modified":1458402676181,"shasum":"ed55b809589d3c70f6c4221ebf6d961576e3efeb"},{"_id":"public/sitemap.xml","modified":1458402676182,"shasum":"f0ef89fbe0de92647e919ed8610d143696eb03a6"},{"_id":"public/index.html","modified":1458402676199,"shasum":"f9a014468f2e39b44b7eda4b382ee359ba14bc0a"}],"Category":[{"name":"iOS开发","_id":"cilza8iaq000146tcrzp006np"},{"name":"iOS Tips","_id":"cilza8ib1000846tcql2bjsmc"}],"Data":[],"Page":[{"title":"Hello World","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n<!--more-->\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"hello-world.md","raw":"title: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n<!--more-->\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","date":"2016-03-19T06:38:57.000Z","updated":"2016-03-19T06:38:57.000Z","path":"hello-world.html","comments":1,"layout":"page","_id":"cilza8iax000546tcy1r1j2yw"},{"title":"Archive","layout":"page-archive","_content":"","source":"archive/index.md","raw":"title: Archive\nlayout: page-archive\n---","date":"2016-03-19T06:38:57.000Z","updated":"2016-03-19T06:38:57.000Z","path":"archive/index.html","comments":1,"_id":"cilza8iaz000646tc8lb0yjl4"}],"Post":[{"title":"【iOS开发】Apple Pay 的集成","date":"2016-02-18T13:19:14.000Z","_content":"![](/img/ApplePay/header.jpg)\nApple Pay在今天终于在中国大陆地区正式开通. Apple Pay不仅仅在线下支付中可以让你通过指纹刷(zhuang)卡(bi), 更可以在线上支付(App中支付)时, 节省掉很多多余的步骤, 让支付宝与微信支付哭晕在厕所... 蛋扯远了, 接下来我们来看看怎么让你的App也支持Apple Pay吧!\n\n<!--more-->\n\n# **App集成Apple Pay**\n---\n### **1. 创建Merchant ID**\n在iOS开发者中心的[Certificates, Identifiers & Profiles页面](https://developer.apple.com/account/ios/identifiers/merchant/merchantCreate.action)中创建一个Merchant ID. (PS:前提是你得有开发者帐号= =)\n`Description`: 这个ID的描述, 建议填写App名称.\n`ID`: Merchent ID的标识符, 一般填写\"merchant.`BundleID`\", 比如`merchant.com.apple.passbook`.\n\n### **2. 工程中配置Apple Pay**\n你的开发者帐号拥有Merchant ID之后, 就需要在工程中配置你刚刚创建的Merchant ID.\n![](/img/ApplePay/image_1.png)\n按照如图顺序即可在你的工程中激活你的Merchant ID.\n\n---\n**未完待续...**\n---\n\nApple Pay需要在支付提供商上面注册商户. 目前Apple Pay支持的提供商有\n1. [CUP](https://open.unionpay.com/ajweb/product/detail?id=80) (中国银联) \n2. [Lianlian Pay](https://apple.lianlianpay.com/OpenPlatform/) (连连支付) \n3. [PayEase](https://www.beijing.com.cn/product/ApplePay_ch.jsp) (首信易支付) \n4. [YeePay](https://www.yeepay.com/article/specialActivities/queryArticle/56c676b814a6d961550c90eb) (易宝支付) \n\n\n如果你的App要上架App Store的话, 在苹果官方[App Store Review Guidelines](https://developer.apple.com/app-store/review/guidelines/#apple-pay)中关于Apple Pay的条款需要特别注意:\n> 29.1 使用Apple Pay的应用程序必须在出售任何商品或者服务之前为用户提供所有材料的购买信息，否则将会被拒绝。使用Apple Pay的应用程序提供多次付款的，至少要公开再次支付的时间长度，和这种状态将持续到取消为止的每一个时期需要用户提供什么，和将产生的费用，以及如何取消。\n\n> 29.2 使用Apple Pay的应用程序必须正确使用 Apple Pay Human Interface Guidelines 中的Apple Pay标识和用户界面元素，否则将会被拒绝。\n \n> 29.3 使用Apple Pay的应用程序不能提供触犯任何领域范围法律的用于交付的商品或者服务，也不能用作任何非法目的。\n \n> 29.4 使用Apple Pay的应用程序必须提供隐私政策，否则将会被拒绝。 \n \n> 29.5 只有为了促进或提高商品和服务的交付，或者依照法律要求，使用Apple Pay的应用程序才能与第三方分享通过Apple Pay获得的数据\n\n# **设计规范**\n---\n1. [Apple Pay 标识指南](https://developer.apple.com/apple-pay/Apple-Pay-Identity-Guidelines.pdf)\n2. [Apple Pay 图标资源包](https://developer.apple.com/services-account/download?path=/ios/apple_pay_resources/Apple_Pay_Resources.zip)","source":"_posts/apple-pay.md","raw":"title: 【iOS开发】Apple Pay 的集成\ndate: 2016-02-18 21:19:14\ncategories: iOS开发\ntags: [Apple Pay]\n---\n![](/img/ApplePay/header.jpg)\nApple Pay在今天终于在中国大陆地区正式开通. Apple Pay不仅仅在线下支付中可以让你通过指纹刷(zhuang)卡(bi), 更可以在线上支付(App中支付)时, 节省掉很多多余的步骤, 让支付宝与微信支付哭晕在厕所... 蛋扯远了, 接下来我们来看看怎么让你的App也支持Apple Pay吧!\n\n<!--more-->\n\n# **App集成Apple Pay**\n---\n### **1. 创建Merchant ID**\n在iOS开发者中心的[Certificates, Identifiers & Profiles页面](https://developer.apple.com/account/ios/identifiers/merchant/merchantCreate.action)中创建一个Merchant ID. (PS:前提是你得有开发者帐号= =)\n`Description`: 这个ID的描述, 建议填写App名称.\n`ID`: Merchent ID的标识符, 一般填写\"merchant.`BundleID`\", 比如`merchant.com.apple.passbook`.\n\n### **2. 工程中配置Apple Pay**\n你的开发者帐号拥有Merchant ID之后, 就需要在工程中配置你刚刚创建的Merchant ID.\n![](/img/ApplePay/image_1.png)\n按照如图顺序即可在你的工程中激活你的Merchant ID.\n\n---\n**未完待续...**\n---\n\nApple Pay需要在支付提供商上面注册商户. 目前Apple Pay支持的提供商有\n1. [CUP](https://open.unionpay.com/ajweb/product/detail?id=80) (中国银联) \n2. [Lianlian Pay](https://apple.lianlianpay.com/OpenPlatform/) (连连支付) \n3. [PayEase](https://www.beijing.com.cn/product/ApplePay_ch.jsp) (首信易支付) \n4. [YeePay](https://www.yeepay.com/article/specialActivities/queryArticle/56c676b814a6d961550c90eb) (易宝支付) \n\n\n如果你的App要上架App Store的话, 在苹果官方[App Store Review Guidelines](https://developer.apple.com/app-store/review/guidelines/#apple-pay)中关于Apple Pay的条款需要特别注意:\n> 29.1 使用Apple Pay的应用程序必须在出售任何商品或者服务之前为用户提供所有材料的购买信息，否则将会被拒绝。使用Apple Pay的应用程序提供多次付款的，至少要公开再次支付的时间长度，和这种状态将持续到取消为止的每一个时期需要用户提供什么，和将产生的费用，以及如何取消。\n\n> 29.2 使用Apple Pay的应用程序必须正确使用 Apple Pay Human Interface Guidelines 中的Apple Pay标识和用户界面元素，否则将会被拒绝。\n \n> 29.3 使用Apple Pay的应用程序不能提供触犯任何领域范围法律的用于交付的商品或者服务，也不能用作任何非法目的。\n \n> 29.4 使用Apple Pay的应用程序必须提供隐私政策，否则将会被拒绝。 \n \n> 29.5 只有为了促进或提高商品和服务的交付，或者依照法律要求，使用Apple Pay的应用程序才能与第三方分享通过Apple Pay获得的数据\n\n# **设计规范**\n---\n1. [Apple Pay 标识指南](https://developer.apple.com/apple-pay/Apple-Pay-Identity-Guidelines.pdf)\n2. [Apple Pay 图标资源包](https://developer.apple.com/services-account/download?path=/ios/apple_pay_resources/Apple_Pay_Resources.zip)","slug":"apple-pay","published":1,"updated":"2016-03-19T06:38:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilza8iak000046tc1y7ppmzz"},{"title":"【iOS Tip】UIImage的renderingMode","date":"2015-03-29T06:32:22.000Z","_content":"很多人在第一次使用UITabBar的时候, 都会遇到一个摸不着头脑的问题:\n明明UI给的图片是这样的 ↓\n![](/img/UIImageRenderingMode/renderingMode_0.png)\n可是用到tabBar中却变成了这样 ↓\n![](/img/UIImageRenderingMode/renderingMode_1.png)\n**WTF!** 咋还自己变色了呢? ![](/img/UIImageRenderingMode/renderingMode_2.jpg)\n其实以上的现象都是源于UIImage的一个属性`renderingMode `.\n\n# **UIImageRenderingMode**\n---\n\n### **1. 概念**\n \n```objc\n@property(nonatomic, readonly) UIImageRenderingMode renderingMode NS_AVAILABLE_IOS(7_0);\n```\n\n<!--more-->\n\n`UIImageRenderingMode`是一个枚举值, 如下:\n```objc\ntypedef NS_ENUM(NSInteger, UIImageRenderingMode) {\n    UIImageRenderingModeAutomatic,      // 根据图片的使用环境和所处的绘图上下文自动调整渲染模式.\n    UIImageRenderingModeAlwaysOriginal, // 始终渲染图片的原始状态, 不会将其当做一个模板(template).\n    UIImageRenderingModeAlwaysTemplate, // 始终把图片当做模板来渲染, 忽略掉了图片的颜色信息.\n} NS_ENUM_AVAILABLE_IOS(7_0);\n```\n\n创建一个UIImage的时候, 默认的**renderingMode**为`UIImageRenderingModeAutomatic`. 这种情况下, 图片会根据当前所处的上下文来决定是渲染图片的原始状态或是当做模板来渲染. \n例如`UINavigationBar`、`UITabBar`、`UIToolBar`、`UISegmentedControl`这些控件, 会自动把其上面的图片(foreground images)当做模板来渲染; 而`UIImageView`、`UIWebView`则会渲染图片的原始状态.\n\n> 关于**模板(template)**: 上文中提到的模板, 其实作用就是忽略掉了图片的所有不透明的颜色信息, 取而代之的是它所在的控件的`tintColor`. \n\n### **2. 应用**\n\n根据上面对**renderingMode**的描述, 我们就可以很容易联想到导致文章开头那个现象的原因:\n- UITabBar会自动将图片当做模板来渲染\n- UITabBar默认的`tintColor`是系统的亮蓝色\n\n所以, 相应的解决方法也有两种:\n**1.设置图片的renderingMode为`UIImageRenderingModeAlwaysOriginal`**\n```objc\nUIImage *selectedImage = [UIImage imageNamed:selectedImageName];\noriginalSelectedImage = [selectedImage imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];\n\nviewController.tabBarItem.selectedImage = originalSelectedImage;\n```\n**2.设置UITabBar的`tintColor`为我们所要的颜色.**\n```objc\ntabBar.tintColor = kAppMainColor;\n```\n\n### **3. 其他**\n\n如果总是在代码中设置**renderingMode**也是比较麻烦的, 还有一个更佳便捷的设置方法, 如下图在`Images.xcassets`里面选中相应的图片, 在右侧的工具栏中的`Render As`字段选择相应的**renderingMode**就可以了.\n![](/img/UIImageRenderingMode/renderingMode_3.png)","source":"_posts/uiimage-rendering-mode.md","raw":"title: 【iOS Tip】UIImage的renderingMode\ndate: 2015-03-29 14:32:22\ncategories: iOS Tips\ntags: [UI]\n---\n很多人在第一次使用UITabBar的时候, 都会遇到一个摸不着头脑的问题:\n明明UI给的图片是这样的 ↓\n![](/img/UIImageRenderingMode/renderingMode_0.png)\n可是用到tabBar中却变成了这样 ↓\n![](/img/UIImageRenderingMode/renderingMode_1.png)\n**WTF!** 咋还自己变色了呢? ![](/img/UIImageRenderingMode/renderingMode_2.jpg)\n其实以上的现象都是源于UIImage的一个属性`renderingMode `.\n\n# **UIImageRenderingMode**\n---\n\n### **1. 概念**\n \n```objc\n@property(nonatomic, readonly) UIImageRenderingMode renderingMode NS_AVAILABLE_IOS(7_0);\n```\n\n<!--more-->\n\n`UIImageRenderingMode`是一个枚举值, 如下:\n```objc\ntypedef NS_ENUM(NSInteger, UIImageRenderingMode) {\n    UIImageRenderingModeAutomatic,      // 根据图片的使用环境和所处的绘图上下文自动调整渲染模式.\n    UIImageRenderingModeAlwaysOriginal, // 始终渲染图片的原始状态, 不会将其当做一个模板(template).\n    UIImageRenderingModeAlwaysTemplate, // 始终把图片当做模板来渲染, 忽略掉了图片的颜色信息.\n} NS_ENUM_AVAILABLE_IOS(7_0);\n```\n\n创建一个UIImage的时候, 默认的**renderingMode**为`UIImageRenderingModeAutomatic`. 这种情况下, 图片会根据当前所处的上下文来决定是渲染图片的原始状态或是当做模板来渲染. \n例如`UINavigationBar`、`UITabBar`、`UIToolBar`、`UISegmentedControl`这些控件, 会自动把其上面的图片(foreground images)当做模板来渲染; 而`UIImageView`、`UIWebView`则会渲染图片的原始状态.\n\n> 关于**模板(template)**: 上文中提到的模板, 其实作用就是忽略掉了图片的所有不透明的颜色信息, 取而代之的是它所在的控件的`tintColor`. \n\n### **2. 应用**\n\n根据上面对**renderingMode**的描述, 我们就可以很容易联想到导致文章开头那个现象的原因:\n- UITabBar会自动将图片当做模板来渲染\n- UITabBar默认的`tintColor`是系统的亮蓝色\n\n所以, 相应的解决方法也有两种:\n**1.设置图片的renderingMode为`UIImageRenderingModeAlwaysOriginal`**\n```objc\nUIImage *selectedImage = [UIImage imageNamed:selectedImageName];\noriginalSelectedImage = [selectedImage imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];\n\nviewController.tabBarItem.selectedImage = originalSelectedImage;\n```\n**2.设置UITabBar的`tintColor`为我们所要的颜色.**\n```objc\ntabBar.tintColor = kAppMainColor;\n```\n\n### **3. 其他**\n\n如果总是在代码中设置**renderingMode**也是比较麻烦的, 还有一个更佳便捷的设置方法, 如下图在`Images.xcassets`里面选中相应的图片, 在右侧的工具栏中的`Render As`字段选择相应的**renderingMode**就可以了.\n![](/img/UIImageRenderingMode/renderingMode_3.png)","slug":"uiimage-rendering-mode","published":1,"updated":"2016-03-19T06:38:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilza8ib0000746tcqe914wsn"},{"title":"【iOS开发】Objective-c Runtime小记","date":"2016-03-16T09:16:08.000Z","_content":"\n# **一. Runtime**\n---\nRuntime是一套底层的C语言API. 实际上, 平时我们编写的Objective-C代码, 底层都是基于runtime实现的, 也就是说, 平时我们编写的Objective-C代码, 最终都是转成了底层的runtime代码(C语言代码). Runtime使得Objective-C这门语言的灵活性大大地提升. 有了runtime, 我们可以在应用运行的时候动态操作对象、类、方法, 也因为这个原因, 使得编程有了更多的可能性, 对于开发中遇到的一些比较棘手的问题, 往往用runtime可以优雅地解决, 接下来让我们看看runtime是为何可以如此牛x.\n\n# **二. Objective-C中类和对象的本质**\n---\n### **1. 对象(Instance)**\n**概念:**\n对象的本质是一个结构体, 在`<objc/objc.h>`中可以找到它的声明:\n```objc\nstruct objc_object {\n    Class isa  OBJC_ISA_AVAILABILITY;\n};\n```\n- `isa`: 指针指向对象所属的[类(Class)](#二.2), Class结构体中包含了成员变量、对象方法等等.  \n\n<!--more-->\n\n**补充:**\n平常我们常常使用`id`来作为对象的指针, 原因就是`<objc/objc.h>`中定义`id `类型来代替`struct objc_object *`:\n```objc\ntypedef struct objc_object *id;\n```\n\n<br/>\n\n### <span id=\"二.2\"> **2. 类(Class)** </span>\n**概念:**\n类的本质是一个Class类型的对象. 在`<objc/runtime.h>`中, 对类的声明如下:\n```objc\nstruct objc_class {\n    Class isa  OBJC_ISA_AVAILABILITY;\n#if !__OBJC2__\n    Class super_class                                        OBJC2_UNAVAILABLE;\n    const char *name                                         OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;\n    struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache *cache                                 OBJC2_UNAVAILABLE;\n    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;\n#endif\n} OBJC2_UNAVAILABLE;\n```\n- `isa`: 指针指向Class对象的[元类(MetaClass)](#二.3), 元类中记录了类方法列表.\n- `super_class`: 指针指向父类. 根类(NSObject)中的super_class指针为空.\n- `name`: 类名\n- `version`: 类的版本, 默认为0\n- `info`: 类的信息, 因为是long型的, 推测是作为标识使用\n- `instance_size`: 类的对象的大小\n- `ivars`: 存放该类所有成员变量的链表\n- `methodLists`: 存放该类所有对象方法的链表\n- `cache`: 缓存常用的对象方法, 提高消息分发的效率\n- `protocols`: 存放该类的协议的链表\n\n**补充:**\n就像`id`类型代表对象指针一样, `<objc/objc.h>`中定义`Class`类型来代替`struct objc_class *`:\n```objc\ntypedef struct objc_class *Class;\n```\n\n<br/>\n\n### <span id=\"二.3\"> **3. 元类(MetaClass)** </span>\n**概念:**\n元类也是一个类, 每个类都有对应的一个元类. 可以通过类中的isa指针找到其对应的元类. 虽然在runtime相关头文件中没有找到MetaClass的声明, 但是在[这个博客](http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html)中对元类的与类的关系解释中, 我们可以推测出元类结构体和类是相似的, 包含(但不仅有)如下成员:\n- `isa`: 指针都是指向根元类(NSObject的元类), 即使是根元类本身的isa也是指向自己\n- `super_class`: 指针指向父元类, 根元类指向根类(NSObject)\n- `methodLists`: 存放该类的所有类方法的链表\n\n**对象、类、元类的关系图：**\n<div style=\"text-align: center\">\n<img src=\"/img/runtime/runtime_0.pdf\"/>\n</div>\n\n# **三. 消息机制**\n---\n我们平常所说的\"方法调用\", 其实是不准确的, 因为在Objective-C中, 所谓的\"方法调用\"本质是消息分发. 比如下面这个\"方法调用\":\n```objc\n[receiver message]\n```\n最终会被编译器转化为:\n```objc\nobjc_msgSend(receiver, @selector(message))\n```\n所以说, 消息分发是通过定义在`<objc/message.h>`中的`objc_msgSend()`方法以及相关的方法来实现的. \n\n需要注意的是消息分发是运行时特性, 说白了就是运行的时候, 一条消息才会知道它所对应的方法的实现是什么. 所以运行的时候, 一条消息的传递过程是这样的:\n>1. 向对象`receiver`对象发送`message`消息.\n2. 通过`receiver`对象的`isa`指针找到它的Class.\n3. 在Class结构体中的`cache`中查找是否有的`message`的selector, 没有的话到`methodLists`里面查找. 若有找到`message`的selector, 则跳转至对应的方法实现完成此次消息分发.\n4. 如果没有找到`message`的实现, `objc_msgSend`会通过当前的Class结构体中的`super_class`指针找到它的父Class, 并重复第3点的动作. \n5. 如果一直没有找到`message`的实现, 第3点与第4点会一直重复直到根类(NSObject).\n6. 如果在根类中依然没有找到`message`的实现, 默认(未实现[消息转发](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtForwarding.html#//apple_ref/doc/uid/TP40008048-CH105-SW1)方法的情况下)就会抛出`unrecognized selector send to instance xxxx`的异常.\n\n这里引用[Apple官方文档](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html#//apple_ref/doc/uid/TP40008048-CH104-SW1)的消息分发原理插图便于理解:\n\n<div style=\"text-align: center\">\n<img src=\"/img/runtime/runtime_1.gif\"/>\n</div>\n\n看到这里或许会担心消息分发的过程太过于繁琐, 以至于影响性能? 其实不会的, 一个类中常用的方法会缓存在`cache`中, 如上面消息分发流程的第2点所说, 一个对象接收到一条消息之后, 并不是直接去`methodLists`查找, 而是先在`cache`中查找, 查找不到了再到`methodLists`中查找. 这样就能使得消息转发的效率得到保障.\n\n# 扩展阅读\n---\n1.[Objective-C Runtime Programming Guide](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html) by Apple\n2.[Objective-C Runtime 运行时系列文章](http://southpeak.github.io/blog/2014/10/25/objective-c-runtime-yun-xing-shi-zhi-lei-yu-dui-xiang/) by 南峰子\n3.[Objective-C Runtime](http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/) by 玉令天下\n4.[(译)Objective-C的动态特性](http://limboy.me/ios/2013/08/03/dynamic-tips-and-tricks-with-objective-c.html) by Limboy’s HQ\n5.[Objective-C 中的消息与消息转发](http://blog.ibireme.com/2013/11/26/objective-c-messaging/) by ibireme\n6.[Objective-C Runtime](http://tech.glowing.com/cn/objective-c-runtime/) by Glow技术团队博客\n","source":"_posts/objective-c-runtime.md","raw":"title: 【iOS开发】Objective-c Runtime小记\ndate: 2016-03-16 17:16:08\ncategories: iOS开发\ntags: [runtime]\n---\n\n# **一. Runtime**\n---\nRuntime是一套底层的C语言API. 实际上, 平时我们编写的Objective-C代码, 底层都是基于runtime实现的, 也就是说, 平时我们编写的Objective-C代码, 最终都是转成了底层的runtime代码(C语言代码). Runtime使得Objective-C这门语言的灵活性大大地提升. 有了runtime, 我们可以在应用运行的时候动态操作对象、类、方法, 也因为这个原因, 使得编程有了更多的可能性, 对于开发中遇到的一些比较棘手的问题, 往往用runtime可以优雅地解决, 接下来让我们看看runtime是为何可以如此牛x.\n\n# **二. Objective-C中类和对象的本质**\n---\n### **1. 对象(Instance)**\n**概念:**\n对象的本质是一个结构体, 在`<objc/objc.h>`中可以找到它的声明:\n```objc\nstruct objc_object {\n    Class isa  OBJC_ISA_AVAILABILITY;\n};\n```\n- `isa`: 指针指向对象所属的[类(Class)](#二.2), Class结构体中包含了成员变量、对象方法等等.  \n\n<!--more-->\n\n**补充:**\n平常我们常常使用`id`来作为对象的指针, 原因就是`<objc/objc.h>`中定义`id `类型来代替`struct objc_object *`:\n```objc\ntypedef struct objc_object *id;\n```\n\n<br/>\n\n### <span id=\"二.2\"> **2. 类(Class)** </span>\n**概念:**\n类的本质是一个Class类型的对象. 在`<objc/runtime.h>`中, 对类的声明如下:\n```objc\nstruct objc_class {\n    Class isa  OBJC_ISA_AVAILABILITY;\n#if !__OBJC2__\n    Class super_class                                        OBJC2_UNAVAILABLE;\n    const char *name                                         OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;\n    struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache *cache                                 OBJC2_UNAVAILABLE;\n    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;\n#endif\n} OBJC2_UNAVAILABLE;\n```\n- `isa`: 指针指向Class对象的[元类(MetaClass)](#二.3), 元类中记录了类方法列表.\n- `super_class`: 指针指向父类. 根类(NSObject)中的super_class指针为空.\n- `name`: 类名\n- `version`: 类的版本, 默认为0\n- `info`: 类的信息, 因为是long型的, 推测是作为标识使用\n- `instance_size`: 类的对象的大小\n- `ivars`: 存放该类所有成员变量的链表\n- `methodLists`: 存放该类所有对象方法的链表\n- `cache`: 缓存常用的对象方法, 提高消息分发的效率\n- `protocols`: 存放该类的协议的链表\n\n**补充:**\n就像`id`类型代表对象指针一样, `<objc/objc.h>`中定义`Class`类型来代替`struct objc_class *`:\n```objc\ntypedef struct objc_class *Class;\n```\n\n<br/>\n\n### <span id=\"二.3\"> **3. 元类(MetaClass)** </span>\n**概念:**\n元类也是一个类, 每个类都有对应的一个元类. 可以通过类中的isa指针找到其对应的元类. 虽然在runtime相关头文件中没有找到MetaClass的声明, 但是在[这个博客](http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html)中对元类的与类的关系解释中, 我们可以推测出元类结构体和类是相似的, 包含(但不仅有)如下成员:\n- `isa`: 指针都是指向根元类(NSObject的元类), 即使是根元类本身的isa也是指向自己\n- `super_class`: 指针指向父元类, 根元类指向根类(NSObject)\n- `methodLists`: 存放该类的所有类方法的链表\n\n**对象、类、元类的关系图：**\n<div style=\"text-align: center\">\n<img src=\"/img/runtime/runtime_0.pdf\"/>\n</div>\n\n# **三. 消息机制**\n---\n我们平常所说的\"方法调用\", 其实是不准确的, 因为在Objective-C中, 所谓的\"方法调用\"本质是消息分发. 比如下面这个\"方法调用\":\n```objc\n[receiver message]\n```\n最终会被编译器转化为:\n```objc\nobjc_msgSend(receiver, @selector(message))\n```\n所以说, 消息分发是通过定义在`<objc/message.h>`中的`objc_msgSend()`方法以及相关的方法来实现的. \n\n需要注意的是消息分发是运行时特性, 说白了就是运行的时候, 一条消息才会知道它所对应的方法的实现是什么. 所以运行的时候, 一条消息的传递过程是这样的:\n>1. 向对象`receiver`对象发送`message`消息.\n2. 通过`receiver`对象的`isa`指针找到它的Class.\n3. 在Class结构体中的`cache`中查找是否有的`message`的selector, 没有的话到`methodLists`里面查找. 若有找到`message`的selector, 则跳转至对应的方法实现完成此次消息分发.\n4. 如果没有找到`message`的实现, `objc_msgSend`会通过当前的Class结构体中的`super_class`指针找到它的父Class, 并重复第3点的动作. \n5. 如果一直没有找到`message`的实现, 第3点与第4点会一直重复直到根类(NSObject).\n6. 如果在根类中依然没有找到`message`的实现, 默认(未实现[消息转发](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtForwarding.html#//apple_ref/doc/uid/TP40008048-CH105-SW1)方法的情况下)就会抛出`unrecognized selector send to instance xxxx`的异常.\n\n这里引用[Apple官方文档](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html#//apple_ref/doc/uid/TP40008048-CH104-SW1)的消息分发原理插图便于理解:\n\n<div style=\"text-align: center\">\n<img src=\"/img/runtime/runtime_1.gif\"/>\n</div>\n\n看到这里或许会担心消息分发的过程太过于繁琐, 以至于影响性能? 其实不会的, 一个类中常用的方法会缓存在`cache`中, 如上面消息分发流程的第2点所说, 一个对象接收到一条消息之后, 并不是直接去`methodLists`查找, 而是先在`cache`中查找, 查找不到了再到`methodLists`中查找. 这样就能使得消息转发的效率得到保障.\n\n# 扩展阅读\n---\n1.[Objective-C Runtime Programming Guide](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html) by Apple\n2.[Objective-C Runtime 运行时系列文章](http://southpeak.github.io/blog/2014/10/25/objective-c-runtime-yun-xing-shi-zhi-lei-yu-dui-xiang/) by 南峰子\n3.[Objective-C Runtime](http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/) by 玉令天下\n4.[(译)Objective-C的动态特性](http://limboy.me/ios/2013/08/03/dynamic-tips-and-tricks-with-objective-c.html) by Limboy’s HQ\n5.[Objective-C 中的消息与消息转发](http://blog.ibireme.com/2013/11/26/objective-c-messaging/) by ibireme\n6.[Objective-C Runtime](http://tech.glowing.com/cn/objective-c-runtime/) by Glow技术团队博客\n","slug":"objective-c-runtime","published":1,"updated":"2016-03-19T15:43:34.000Z","_id":"cilza8ib3000c46tce3vtpgct","comments":1,"layout":"post","photos":[],"link":""},{"title":"【iOS开发】Associated Objects-为分类添加属性","date":"2016-01-25T07:06:34.000Z","_content":"分类(`category`)在iOS开发中的应用非常广泛, 优点譬如给现有的类拓展更多的方法、对一个类的多种功能进行局部化封装等等, 都是非常方便的. 但是也有一个痛点, 就是分类中无法添加属性. 但是`Objective-C`的`runtime`中有许多黑科技可以帮我们实现很多常规方法下几乎不可能的事情--比如在分类中添加属性.这个黑科技叫做**关联对象**(`Associated Objects`). \n\n# **Associated Objects**\n---\n关联对象相关的函数有以下3个:\n- `objc_setAssociatedObject` : 设置关联对象\n- `objc_getAssociatedObject ` : 获取关联对象\n- `objc_removeAssociatedObjects ` : 移除某个对象的所有关联对象\n\n<!--more-->\n\n从`<objc/runtime.h>`中可以找到它的相关函数定义:\n### **1. 设置关联对象**\n```objc\nvoid objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy)\n```\n- `object` : 需要设置关联对象的对象, `id`类型\n- `key` : 关联对象的key, `const void *`类型 (_详细请看下文第4点_)\n- `value` : 关联对象的值, `id`类型\n- `policy ` : 关联对象的策略, `objc_AssociationPolicy`类型\n - `policy`是一个枚举类型, 用于修饰关联对象:\n```objc\nenum {\n        OBJC_ASSOCIATION_ASSIGN = 0,          // 等价于 @property (assign) 或 @property (unsafe_unretained)\n        OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1,// 等价于 @property (nonatomic, strong)\n        OBJC_ASSOCIATION_COPY_NONATOMIC = 3,  // 等价于 @property (nonatomic, copy)\n        OBJC_ASSOCIATION_RETAIN = 01401,      // 等价于 @property (atomic, strong)\n        OBJC_ASSOCIATION_COPY = 01403         // 等价于 @property (atomic, copy)\n};\n```\n\n### **2. 获取关联对象**\n```objc\nid objc_getAssociatedObject(id object, const void *key)\n```\n- `object` : 获取关联对象的对象, `id`类型\n- `key` : 关联对象的key, `const void *`类型\n\n### **3. 移除某个对象的所有关联对象**\n```objc\nvoid objc_removeAssociatedObjects(id object)\n```\n- `object` : 需要移除所有关联对象的对象, `id`类型\n\n _注: 这个函数是用来移除对象的**所有**关联对象, 而非移除对象的某个关联对象. 这个函数Apple官方文档是这么说的_ :\n> You should not use this function for general removal of associations from objects, since it also removes associations that other clients may have added to the object. Typically you should use objc_setAssociatedObject with a nil value to clear an association.\n\n *意思是如果要移除对象的某个关联对象, 应该使用`objc_setAssociatedObject`对参数`value`置nil.*\n\n### **4. 关于参数-key**\n这个key一般只要赋值一个`static char`的地址就行, 比如:\n```objc\nstatic char kAssociatedObjectKey;\n\nobjc_getAssociatedObject(self, &kAssociatedObjectKey);\n```\n但是还有更简单的方法, 可以使用`selector`:\n```objc\nobjc_getAssociatedObject(self, @selector(associatedObject));\n```\n或者直接使用`_cmd`:\n```objc\nobjc_getAssociatedObject(self, _cmd);\n```\n* *关于`_cmd`* :\n\n  *Apple的文档是是这么解释的: *\n> The _cmd variable is a hidden argument passed to every method that is the current selector\n\n  *意思就是`_cmd`在Objective-C的方法中表示当前方法的`selector`, 正如同`self`表示调用当前方法的对象(类)一样.*  \n\n# **Simple Example**\n---\n```objc\n@interface NSObject (AssociatedObject)\n@property (nonatomic, strong) id associatedObject;\n@end\n\n@implementation NSObject (AssociatedObject)\n\n/**\n *  对象的setter\n */\n- (void)setAssociatedObject:(id)object {\n     objc_setAssociatedObject(self, @selector(associatedObject), object, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n\n/**\n *  对象的getter\n */\n- (id)associatedObject {\n    return objc_getAssociatedObject(self, @selector(associatedObject));\n}\n\n@end\n```\n\n### 参考\n1.[Associated Objects](http://nshipster.com/associated-objects/) by Mattt\n2.[Objective-C Runtime Reference](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/index.html#//apple_ref/c/func/objc_getAssociatedObject) by Apple","source":"_posts/associated-objects.md","raw":"title: 【iOS开发】Associated Objects-为分类添加属性\ndate: 2016-01-25 15:06:34\ncategories: iOS开发\ntags: [runtime]\n------\n分类(`category`)在iOS开发中的应用非常广泛, 优点譬如给现有的类拓展更多的方法、对一个类的多种功能进行局部化封装等等, 都是非常方便的. 但是也有一个痛点, 就是分类中无法添加属性. 但是`Objective-C`的`runtime`中有许多黑科技可以帮我们实现很多常规方法下几乎不可能的事情--比如在分类中添加属性.这个黑科技叫做**关联对象**(`Associated Objects`). \n\n# **Associated Objects**\n---\n关联对象相关的函数有以下3个:\n- `objc_setAssociatedObject` : 设置关联对象\n- `objc_getAssociatedObject ` : 获取关联对象\n- `objc_removeAssociatedObjects ` : 移除某个对象的所有关联对象\n\n<!--more-->\n\n从`<objc/runtime.h>`中可以找到它的相关函数定义:\n### **1. 设置关联对象**\n```objc\nvoid objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy)\n```\n- `object` : 需要设置关联对象的对象, `id`类型\n- `key` : 关联对象的key, `const void *`类型 (_详细请看下文第4点_)\n- `value` : 关联对象的值, `id`类型\n- `policy ` : 关联对象的策略, `objc_AssociationPolicy`类型\n - `policy`是一个枚举类型, 用于修饰关联对象:\n```objc\nenum {\n        OBJC_ASSOCIATION_ASSIGN = 0,          // 等价于 @property (assign) 或 @property (unsafe_unretained)\n        OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1,// 等价于 @property (nonatomic, strong)\n        OBJC_ASSOCIATION_COPY_NONATOMIC = 3,  // 等价于 @property (nonatomic, copy)\n        OBJC_ASSOCIATION_RETAIN = 01401,      // 等价于 @property (atomic, strong)\n        OBJC_ASSOCIATION_COPY = 01403         // 等价于 @property (atomic, copy)\n};\n```\n\n### **2. 获取关联对象**\n```objc\nid objc_getAssociatedObject(id object, const void *key)\n```\n- `object` : 获取关联对象的对象, `id`类型\n- `key` : 关联对象的key, `const void *`类型\n\n### **3. 移除某个对象的所有关联对象**\n```objc\nvoid objc_removeAssociatedObjects(id object)\n```\n- `object` : 需要移除所有关联对象的对象, `id`类型\n\n _注: 这个函数是用来移除对象的**所有**关联对象, 而非移除对象的某个关联对象. 这个函数Apple官方文档是这么说的_ :\n> You should not use this function for general removal of associations from objects, since it also removes associations that other clients may have added to the object. Typically you should use objc_setAssociatedObject with a nil value to clear an association.\n\n *意思是如果要移除对象的某个关联对象, 应该使用`objc_setAssociatedObject`对参数`value`置nil.*\n\n### **4. 关于参数-key**\n这个key一般只要赋值一个`static char`的地址就行, 比如:\n```objc\nstatic char kAssociatedObjectKey;\n\nobjc_getAssociatedObject(self, &kAssociatedObjectKey);\n```\n但是还有更简单的方法, 可以使用`selector`:\n```objc\nobjc_getAssociatedObject(self, @selector(associatedObject));\n```\n或者直接使用`_cmd`:\n```objc\nobjc_getAssociatedObject(self, _cmd);\n```\n* *关于`_cmd`* :\n\n  *Apple的文档是是这么解释的: *\n> The _cmd variable is a hidden argument passed to every method that is the current selector\n\n  *意思就是`_cmd`在Objective-C的方法中表示当前方法的`selector`, 正如同`self`表示调用当前方法的对象(类)一样.*  \n\n# **Simple Example**\n---\n```objc\n@interface NSObject (AssociatedObject)\n@property (nonatomic, strong) id associatedObject;\n@end\n\n@implementation NSObject (AssociatedObject)\n\n/**\n *  对象的setter\n */\n- (void)setAssociatedObject:(id)object {\n     objc_setAssociatedObject(self, @selector(associatedObject), object, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n\n/**\n *  对象的getter\n */\n- (id)associatedObject {\n    return objc_getAssociatedObject(self, @selector(associatedObject));\n}\n\n@end\n```\n\n### 参考\n1.[Associated Objects](http://nshipster.com/associated-objects/) by Mattt\n2.[Objective-C Runtime Reference](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/index.html#//apple_ref/c/func/objc_getAssociatedObject) by Apple","slug":"associated-objects","published":1,"updated":"2016-03-19T06:38:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilza8ib6000g46tcia3ojl0z"}],"PostAsset":[],"PostCategory":[{"post_id":"cilza8iak000046tc1y7ppmzz","category_id":"cilza8iaq000146tcrzp006np","_id":"cilza8iat000446tcg50f28ks"},{"post_id":"cilza8ib0000746tcqe914wsn","category_id":"cilza8ib1000846tcql2bjsmc","_id":"cilza8ib2000b46tcdedcnebx"},{"post_id":"cilza8ib6000g46tcia3ojl0z","category_id":"cilza8iaq000146tcrzp006np","_id":"cilza8ib7000h46tcarjgli24"},{"post_id":"cilza8ib3000c46tce3vtpgct","category_id":"cilza8iaq000146tcrzp006np","_id":"cilzb0uq2000w46tcfuzklf01"}],"PostTag":[{"post_id":"cilza8iak000046tc1y7ppmzz","tag_id":"cilza8iar000246tcni4xdz7n","_id":"cilza8iat000346tcs3jbkah0"},{"post_id":"cilza8ib0000746tcqe914wsn","tag_id":"cilza8ib1000946tc093npd6w","_id":"cilza8ib2000a46tcb1xt2s85"},{"post_id":"cilza8ib3000c46tce3vtpgct","tag_id":"cilza8ib4000e46tced04j9md","_id":"cilza8ib5000f46tciz7auqch"},{"post_id":"cilza8ib6000g46tcia3ojl0z","tag_id":"cilza8ib4000e46tced04j9md","_id":"cilza8ib8000i46tco66i3bhf"}],"Tag":[{"name":"Apple Pay","_id":"cilza8iar000246tcni4xdz7n"},{"name":"UI","_id":"cilza8ib1000946tc093npd6w"},{"name":"runtime","_id":"cilza8ib4000e46tced04j9md"}]}}